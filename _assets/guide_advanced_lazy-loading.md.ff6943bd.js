import{o as n,e as s,G as a}from"./framework.c00dda38.js";const e='{"title":"Lazy Loading Routes","description":"","frontmatter":{},"headers":[{"level":2,"title":"Grouping Components in the Same Chunk","slug":"grouping-components-in-the-same-chunk"}],"relativePath":"guide/advanced/lazy-loading.md","lastUpdated":1607559931863.911}';var t={};const o=a('<h1 id="lazy-loading-routes"><a class="header-anchor" href="#lazy-loading-routes" aria-hidden="true">#</a> Lazy Loading Routes</h1><p>When building apps with a bundler, the JavaScript bundle can become quite large, and thus affect the page load time. It would be more efficient if we can split each route&#39;s components into a separate chunks, and only load them when the route is visited.</p><p>Vue Router supports <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports" target="_blank" rel="noopener noreferrer">dynamic imports</a> out of the box, meaning you can replace static imports with dynamic ones:</p><div class="language-js"><pre><code><span class="token comment">// replace</span>\n<span class="token comment">// import UserDetails from &#39;./views/UserDetails&#39;</span>\n<span class="token comment">// with</span>\n<span class="token keyword">const</span> <span class="token function-variable function">UserDetails</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./views/UserDetails&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  routes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/users/:id&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> UserDetails <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>The <code>component</code> (and <code>components</code>) option accepts a function that returns a Promise of a component and Vue Router <strong>will only fetch it when entering the page for the first time</strong>, then use the cached version. Which means you can also have more complex functions as long as they return a Promise:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">UserDetails</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">/* component definition */</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>In general, it&#39;s a good idea <strong>to always use dynamic imports</strong> for all your routes.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Do <strong>not</strong> use <a href="https://v3.vuejs.org/guide/component-dynamic-async.html#async-components" target="_blank" rel="noopener noreferrer">Async components</a> for routes. Async components can still be used inside route components but route component themselves are just dynamic imports.</p></div><p>When using a bundler like webpack, this will automatically benefit from <a href="https://webpack.js.org/guides/code-splitting/" target="_blank" rel="noopener noreferrer">code splitting</a></p><p>When using Babel, you will need to add the <a href="https://babeljs.io/docs/plugins/syntax-dynamic-import/" target="_blank" rel="noopener noreferrer">syntax-dynamic-import</a> plugin so that Babel can properly parse the syntax.</p><h2 id="grouping-components-in-the-same-chunk"><a class="header-anchor" href="#grouping-components-in-the-same-chunk" aria-hidden="true">#</a> Grouping Components in the Same Chunk</h2><p>Sometimes we may want to group all the components nested under the same route into the same async chunk. To achieve that we need to use <a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="noopener noreferrer">named chunks</a> by providing a chunk name using a special comment syntax (requires webpack &gt; 2.4):</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">UserDetails</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="token string">&#39;./UserDetails.vue&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">UserDashboard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="token string">&#39;./UserDashboard.vue&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">UserProfileEdit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="token string">&#39;./UserProfileEdit.vue&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>webpack will group any async module with the same chunk name into the same async chunk.</p>',14);t.render=function(a,e,t,p,c,r){return n(),s("div",null,[o])};export default t;export{e as __pageData};
