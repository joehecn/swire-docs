import{o as s,e as n,G as a}from"./framework.c00dda38.js";const e='{"title":"Passing Props to Route Components","description":"","frontmatter":{},"headers":[{"level":2,"title":"Boolean mode","slug":"boolean-mode"},{"level":2,"title":"Named views","slug":"named-views"},{"level":2,"title":"Object mode","slug":"object-mode"},{"level":2,"title":"Function mode","slug":"function-mode"}],"relativePath":"guide/essentials/passing-props.md","lastUpdated":1607922418683.9895}';var o={};const t=a('<h1 id="passing-props-to-route-components"><a class="header-anchor" href="#passing-props-to-route-components" aria-hidden="true">#</a> Passing Props to Route Components</h1><p>Using <code>$route</code> in your component creates a tight coupling with the route which limits the flexibility of the component as it can only be used on certain URLs. While this is not necessarily a bad thing, we can decouple this behavior with a <code>props</code> option:</p><p>We can replace</p><div class="language-js"><pre><code><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;User {{ $route.params.id }}&lt;/div&gt;&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> User <span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre></div><p>with</p><div class="language-js"><pre><code><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;User {{ id }}&lt;/div&gt;&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> User<span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre></div><p>This allows you to use the component anywhere, which makes the component easier to reuse and test.</p><h2 id="boolean-mode"><a class="header-anchor" href="#boolean-mode" aria-hidden="true">#</a> Boolean mode</h2><p>When <code>props</code> is set to <code>true</code>, the <code>route.params</code> will be set as the component props.</p><h2 id="named-views"><a class="header-anchor" href="#named-views" aria-hidden="true">#</a> Named views</h2><p>For routes with named views, you have to define the <code>props</code> option for each named view:</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span>\n    components<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> User<span class="token punctuation">,</span> sidebar<span class="token operator">:</span> Sidebar <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    props<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sidebar<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><h2 id="object-mode"><a class="header-anchor" href="#object-mode" aria-hidden="true">#</a> Object mode</h2><p>When <code>props</code> is an object, this will be set as the component props as-is. Useful for when the props are static.</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/promotion/from-newsletter&#39;</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> Promotion<span class="token punctuation">,</span>\n    props<span class="token operator">:</span> <span class="token punctuation">{</span> newsletterPopup<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><h2 id="function-mode"><a class="header-anchor" href="#function-mode" aria-hidden="true">#</a> Function mode</h2><p>You can create a function that returns props. This allows you to cast parameters into other types, combine static values with route-based values, etc.</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/search&#39;</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> SearchUser<span class="token punctuation">,</span>\n    <span class="token function-variable function">props</span><span class="token operator">:</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> query<span class="token operator">:</span> route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>The URL <code>/search?q=vue</code> would pass <code>{query: &#39;vue&#39;}</code> as props to the <code>SearchUser</code> component.</p><p>Try to keep the <code>props</code> function stateless, as it&#39;s only evaluated on route changes. Use a wrapper component if you need state to define the props, that way vue can react to state changes.</p><p>For advanced usage, check out the <a href="https://github.com/vuejs/vue-router/blob/dev/examples/route-props/app.js" target="_blank" rel="noopener noreferrer">example</a>.</p>',21);o.render=function(a,e,o,p,c,r){return s(),n("div",null,[t])};export default o;export{e as __pageData};
