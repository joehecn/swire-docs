import{o as n,e as a,G as s}from"./framework.c00dda38.js";const t='{"title":"Programmatic Navigation","description":"","frontmatter":{"sidebarDepth":0},"headers":[{"level":2,"title":"Navigate to a different location","slug":"navigate-to-a-different-location"},{"level":2,"title":"Replace current location","slug":"replace-current-location"},{"level":2,"title":"Traverse history","slug":"traverse-history"},{"level":2,"title":"History Manipulation","slug":"history-manipulation"}],"relativePath":"guide/essentials/navigation.md","lastUpdated":1607922418683.9895}';var e={};const o=s('<h1 id="programmatic-navigation"><a class="header-anchor" href="#programmatic-navigation" aria-hidden="true">#</a> Programmatic Navigation</h1><p>Aside from using <code>&lt;router-link&gt;</code> to create anchor tags for declarative navigation, we can do this programmatically using the router&#39;s instance methods.</p><h2 id="navigate-to-a-different-location"><a class="header-anchor" href="#navigate-to-a-different-location" aria-hidden="true">#</a> Navigate to a different location</h2><p><strong>Note: Inside of a Vue instance, you have access to the router instance as <code>$router</code>. You can therefore call <code>this.$router.push</code>.</strong></p><p>To navigate to a different URL, use <code>router.push</code>. This method pushes a new entry into the history stack, so when the user clicks the browser back button they will be taken to the previous URL.</p><p>This is the method called internally when you click a <code>&lt;router-link&gt;</code>, so clicking <code>&lt;router-link :to=&quot;...&quot;&gt;</code> is the equivalent of calling <code>router.push(...)</code>.</p><table><thead><tr><th>Declarative</th><th>Programmatic</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td><code>router.push(...)</code></td></tr></tbody></table><p>The argument can be a string path, or a location descriptor object. Examples:</p><div class="language-js"><pre><code><span class="token comment">// literal string path</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/users/eduardo&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// object with path</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/users/eduardo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// named route with params to let the router build the url</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">&#39;eduardo&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// with query, resulting in /register?plan=private</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/register&#39;</span><span class="token punctuation">,</span> query<span class="token operator">:</span> <span class="token punctuation">{</span> plan<span class="token operator">:</span> <span class="token string">&#39;private&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// with hash, resulting in /about#team</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span> hash<span class="token operator">:</span> <span class="token string">&#39;#team&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>Note</strong>: <code>params</code> are ignored if a <code>path</code> is provided, which is not the case for <code>query</code>, as shown in the example above. Instead, you need to provide the <code>name</code> of the route or manually specify the whole <code>path</code> with any parameter:</p><div class="language-js"><pre><code><span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&#39;eduardo&#39;</span>\n<span class="token comment">// we can manually build the url but we will have to handle the encoding ourselves</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/user/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// -&gt; /user/eduardo</span>\n<span class="token comment">// same as</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/user/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; /user/eduardo</span>\n<span class="token comment">// if possible use `name` and `params` to benefit from automatic URL encoding</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; /user/eduardo</span>\n<span class="token comment">// `params` cannot be used alongside `path`</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; /user</span>\n</code></pre></div><p>Since the prop <code>to</code> accepts the same kind of object as <code>router.push</code>, the exact same rules apply to both of them.</p><p><code>router.push</code> and all the other navigation methods return a <em>Promise</em> that allows us to wait til the navigation is finished and to know if it succeeded or failed. We will talk more about that in <a href="./../advanced/navigation-handling.html">Navigation Handling</a>.</p><h2 id="replace-current-location"><a class="header-anchor" href="#replace-current-location" aria-hidden="true">#</a> Replace current location</h2><p>It acts like <code>router.push</code>, the only difference is that it navigates without pushing a new history entry, as its name suggests - it replaces the current entry.</p><table><thead><tr><th>Declarative</th><th>Programmatic</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td><td><code>router.replace(...)</code></td></tr></tbody></table><p>It&#39;s also possible to directly add a property <code>replace: true</code> to the <code>routeLocation</code> that is passed to <code>router.push</code>:</p><div class="language-js"><pre><code>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> replace<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// equivalent to</span>\nrouter<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="traverse-history"><a class="header-anchor" href="#traverse-history" aria-hidden="true">#</a> Traverse history</h2><p>This method takes a single integer as parameter that indicates by how many steps to go forward or go backward in the history stack, similar to <code>window.history.go(n)</code>.</p><p>Examples</p><div class="language-js"><pre><code><span class="token comment">// go forward by one record, the same as router.forward()</span>\nrouter<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n<span class="token comment">// go back by one record, the same as router.back()</span>\nrouter<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n<span class="token comment">// go forward by 3 records</span>\nrouter<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\n<span class="token comment">// fails silently if there aren&#39;t that many records</span>\nrouter<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>\nrouter<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="history-manipulation"><a class="header-anchor" href="#history-manipulation" aria-hidden="true">#</a> History Manipulation</h2><p>You may have noticed that <code>router.push</code>, <code>router.replace</code> and <code>router.go</code> are counterparts of <a href="https://developer.mozilla.org/en-US/docs/Web/API/History" target="_blank" rel="noopener noreferrer"><code>window.history.pushState</code>, <code>window.history.replaceState</code> and <code>window.history.go</code></a>, and they do imitate the <code>window.history</code> APIs.</p><p>Therefore, if you are already familiar with <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API" target="_blank" rel="noopener noreferrer">Browser History APIs</a>, manipulating history will feel familiar when using Vue Router.</p><p>It is worth mentioning that Vue Router navigation methods (<code>push</code>, <code>replace</code>, <code>go</code>) work consistently no matter the kind of <a href="/api/#history"><code>history</code> option</a> is passed when creating the router instance.</p>',26);e.render=function(s,t,e,p,c,r){return n(),a("div",null,[o])};export default e;export{t as __pageData};
