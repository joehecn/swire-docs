import{o as n,e as a,q as s,G as t}from"./framework.c00dda38.js";const e='{"title":"Route Meta Fields","description":"","frontmatter":{},"headers":[{"level":2,"title":"TypeScript","slug":"typescript"}],"relativePath":"guide/advanced/meta.md","lastUpdated":1607559931863.911}';var o={};const p=t('<h1 id="route-meta-fields"><a class="header-anchor" href="#route-meta-fields" aria-hidden="true">#</a> Route Meta Fields</h1><p>Sometimes, you might want to attach arbitrary information to routes like transition names, who can access the route, etc. This can be achieved through the <code>meta</code> property which accepts an object of properties and can be accessed on the route location and navigation guards. You can define <code>meta</code> properties like this:</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/posts&#39;</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> PostsLayout<span class="token punctuation">,</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        path<span class="token operator">:</span> <span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span>\n        component<span class="token operator">:</span> PostsNew<span class="token punctuation">,</span>\n        <span class="token comment">// only authenticated users can create posts</span>\n        meta<span class="token operator">:</span> <span class="token punctuation">{</span> requiresAuth<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        path<span class="token operator">:</span> <span class="token string">&#39;:id&#39;</span><span class="token punctuation">,</span>\n        component<span class="token operator">:</span> PostsDetail\n        <span class="token comment">// anybody can read a post</span>\n        meta<span class="token operator">:</span> <span class="token punctuation">{</span> requiresAuth<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>So how do we access this <code>meta</code> field?</p>',4),c=t('<p>First, each route object in the <code>routes</code> configuration is called a <strong>route record</strong>. Route records may be nested. Therefore when a route is matched, it can potentially match more than one route record.</p><p>For example, with the above route config, the URL <code>/posts/new</code> will match both the parent route record (<code>path: &#39;/posts&#39;</code>) and the child route record (<code>path: &#39;new&#39;</code>).</p><p>All route records matched by a route are exposed on the <code>$route</code> object (and also route objects in navigation guards) as the <code>$route.matched</code> Array. We could loop through that array to check all <code>meta</code> fields, but Vue Router also provides you a <code>$route.meta</code> that is a non-recursive merge of <strong>all <code>meta</code></strong> fields from parent to child. Meaning you can simply write</p><div class="language-js"><pre><code>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// instead of having to check every route record with</span>\n  <span class="token comment">// to.matched.some(record =&gt; record.meta.requiresAuth)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiresAuth <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>auth<span class="token punctuation">.</span><span class="token function">isLoggedIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// this route requires auth, check if logged in</span>\n    <span class="token comment">// if not, redirect to login page.</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span>\n      <span class="token comment">// save the location we were at to come back later</span>\n      query<span class="token operator">:</span> <span class="token punctuation">{</span> redirect<span class="token operator">:</span> to<span class="token punctuation">.</span>fullPath <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="typescript"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h2><p>It is possible to type the meta field by extending the <code>RouteMeta</code> interface:</p><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;vue-router&#39;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">interface</span> <span class="token class-name">RouteMeta</span> <span class="token punctuation">{</span>\n    <span class="token comment">// is optional</span>\n    isAdmin<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n    <span class="token comment">// must be declared by every route</span>\n    requiresAuth<span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',7);o.render=function(t,e,o,r,u,l){return n(),a("div",null,[p,s(" TODO: the explanation about route records should be explained before and things should be moved here "),c])};export default o;export{e as __pageData};
